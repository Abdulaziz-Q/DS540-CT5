# -*- coding: utf-8 -*-
"""Classification Models to Iris Flowers Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PVIWcZQPw2Z0A32-PjtHOml1rLscNWPq

#  Apply Machine Learning Classification Models to Iris Flowers Dataset
"""

def main():
    print("Apply Machine Learning Classification Models to Iris Flowers Dataset")
    print('\n')
    # import pandas library and read the data set
    import pandas as pd
    df = pd.read_csv('iris.csv')
    # features stored in X and variety in y
    X = df.iloc[:,:-1].values
    y = df.iloc[:,4].values
    # splitting X and y to train and test 
    from sklearn.model_selection import train_test_split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=11)
    # Standardize features by removing the mean and scaling to unit variance
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
    # Applying K Nearest Neighbors Machine Learning classification model
    from sklearn.neighbors import KNeighborsClassifier
    knn = KNeighborsClassifier()
    knn.fit(X_train,y_train)
    y_pred_knn = knn.predict(X_test)
    print('KNN prediction for the X test:\n')
    print(y_pred_knn,'\n')
    # classification metrics for KNN
    from sklearn.metrics import confusion_matrix, classification_report , accuracy_score
    print("K Nearest Neighbors:")
    print("Classification Report:\n")
    print(classification_report(y_test,y_pred_knn),'\n')
    print("Classification Confusion Matrix:\n")
    print(confusion_matrix(y_test,y_pred_knn),'\n')
    print("Classification Accuracy Score:\n")
    print(accuracy_score(y_test, y_pred_knn))
    print('\n')
    # Applying Random Forests Machine Learning classification models
    from sklearn.ensemble import RandomForestClassifier
    rf = RandomForestClassifier()
    rf.fit(X_train,y_train)
    y_pred_rf = rf.predict(X_test)
    print('Random Forest prediction for the X test:\n')
    print(y_pred_rf,'\n')
    # classification metrics Random Forest
    print("Random Forest:")
    print("Classification Report:\n")
    print(classification_report(y_test,y_pred_rf),'\n')
    print("Classification Confusion Matrix:\n")
    print(confusion_matrix(y_test,y_pred_rf),'\n')
    print("Classification Accuracy Score:\n")
    print(accuracy_score(y_test, y_pred_rf))

if __name__ == "__main__":
    main()